* Game of Life & Visual Encryption

This folder contains our project's code and documentation.

Conway's game of life is a cellular automaton, where evolution can be observed
according to 4 rules.

1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.
2. Any live cell with two or three live neighbours lives on to the next generation.
3. Any live cell with more than three live neighbours dies, as if by overpopulation.
4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.

So a matrix needs to be created and represented using the Qt framework, 
where each entry represents a cell and given a time span, the evolution
can be observed. 
The matrix should be like a finite field (modulo operation).

** Our Model

We first developed a basic Matrix class to be inherited for both main
exercises, since a grid of such a type is needed. We implemented this class
containing all important methods a matrix needs, including both mathematical
ones, as well as input/output ones and all needed constructers
(default, copy, assignment, move, destructor, etc.).

The Matrix class is build on top of the c++ standard vector which contains
a better and more flexibel version of a CType array, which will be much
clean to perform all operations needed in the program.



** Usage

Both parts of this project contain a console variant and graphical version
programmed with the Qt framework.

The following paragraphs contain details on how to compile and run the 
console variants of the programs.

*** Preperation Task

The first exercise (Aufgabe 1 a und b) is a preperation for the game of life
and its short program can be found in the /src/Aufgabe1ab directory. 
To compile and run it, simply type *make* in the console and */aufgabe1ab* 
to run the program.

*** Game of Life

The game of consist of both a terminal version, as well as a graphical
one, but both contain the same features. 

One can import a predefined cellular automaton matrix from a file
or give a long string containing it to be read and initialized by the program.

Both speed (timer) and dimensions of the automaton are variable and can
be changed at anytime during the runtime of the program.

Another important feature, is that the user can alterate the living status
of any given cell by selection, alternating the "biological" process.

And finally the result of any phase can be saved in an external text file
in the same format as the ones use to import a matrix.



*** Encryption

TODO:


** References

- [[https://www.amazon.de/Das-digitale-Universum-Zellul%C3%A4re-Automaten/dp/3528066776][Das digitale Universum: Zelluläre Automaten als Modelle der Natur (Facetten)]]
- [[https://www.springer.com/de/book/9783642451300][Pixelspiele Modellieren und Simulieren mit zellulären Automaten]]
- [[https://de.wikipedia.org/wiki/Zellul%C3%A4rer_Automat][Cellular Automaton - Wikipedia]]
- [[https://de.wikipedia.org/wiki/Conways_Spiel_des_Lebens][Game of Life - Wikipedia]]
- [[http://mathworld.wolfram.com/CellularAutomaton.html][Cellular Automaton - WolframAlpha]]

